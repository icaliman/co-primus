{
  "name": "primus-rooms",
  "version": "2.2.0",
  "description": "Simple rooms wrapper for Primus",
  "author": {
    "name": "Jonathan Brumley",
    "email": "cayasso@gmail.com"
  },
  "homepage": "https://github.com/cayasso/primus-rooms",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cayasso/primus-rooms.git"
  },
  "keywords": [
    "connection",
    "ws",
    "rooms",
    "channels",
    "realtime",
    "websocket",
    "engine.io",
    "socket.io",
    "plugin",
    "sockjs",
    "browserchannel"
  ],
  "license": "MIT",
  "dependencies": {
    "debug": "0.7.x"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "primus": "~1.4.5",
    "ws": "~0.4.27",
    "primus-emitter": "~2.x.x",
    "primus-multiplex": "~2.x.x"
  },
  "readme": "# Primus Rooms\n\n[![Build Status](https://travis-ci.org/cayasso/primus-rooms.png?branch=master)](https://travis-ci.org/cayasso/primus-rooms)\n[![NPM version](https://badge.fury.io/js/primus-rooms.png)](http://badge.fury.io/js/primus-rooms)\n\nNode.JS module that adds room capabilities to a [Primus](https://github.com/3rd-Eden/primus) server.\n\n## Instalation\n\n```\nnpm install primus-rooms\n```\n\n## Usage\n\n### On the Server\n\n```javascript\nvar Primus = require('primus');\nvar Rooms = require('primus-rooms');\nvar server = require('http').createServer();\n\n// primus instance\nvar primus = new Primus(server, { transformer: 'websockets' });\n\n// add rooms to Primus\nprimus.use('rooms', Rooms);\n\nprimus.on('connection', function (spark) {\n\n  spark.on('data', function(data) {\n\n    data = data || {};\n    var action = data.action;\n    var room = data.room;\n\n    // join a room\n    if ('join' === action) {\n      spark.join(room, function () {\n\n        // send message to this client\n        spark.write('you joined room ' + room);\n\n        // send message to all clients except this one\n        spark.room(room).write(spark.id + ' joined room ' + room);\n      });\n    }\n\n    // leave a room\n    if ('leave' === action) {\n      spark.leave(room, function () {\n        \n        // send message to this client\n        spark.write('you left room ' + room);\n      });\n    }\n\n  });\n\n});\n\nserver.listen(8080);\n```\n\n### On the Client\n\n```javascript\nvar primus = Primus.connect('ws://localhost:8080');\n\nprimus.on('open', function () {\n\n  // Send request to join the news room\n  primus.write({ action: 'join', room: 'news' });\n\n  // Send request to leave the news room\n  primus.write({ action: 'leave', room: 'news' });\n\n  // print server message\n  primus.on('data', function (message) {\n    console.log(message);\n  });\n\n});\n\n```\n\n## Client to client\n\n### Client\n\n```javascript\nprimus.write({ room: 'chat', msg: 'Hello some one' });\n```\n\n### Server\n\n```javascript\nprimus.on('connection', function(spark){\n\n  spark.on('data', function(data){\n    var room = data.room;\n    var message = data.msg;\n\n    // check if spark is already in this room\n    if (~spark.rooms().indexOf(room)) {\n      send();\n    } else {\n    // join the room\n    spark.join(room, function(){\n      send();\n    })\n    }\n\n    // send to all clients in the room\n    function send() {\n      spark.room(room).write(message);\n    }\n  })\n\n});\n```\n\n## API\n\n### primus.adapter(Adapter)\n\nSet your own `adapter` for rooms, by default `primus-rooms` comes \nwith its own `memory` adapter but its easy to provide a custom one.\n\n```javascript\n// as argument\nvar primus = new Primus(url, { transformer: 'sockjs', adapter: myAdapter });\nprimus.use('rooms', Rooms);\n\n// by calling the method\nprimus.adapter(new MyAdapter());\n```\n\n### primus.join(spark, name, [fn])\n\nJoin client to a `room`, `fn` is optional callback.\n\n```javascript\nprimus.join(spark, 'room', fn);\n```\n\n### primus.leave(spark, name, [fn])\n\nRemove client from a specific `room`, `fn` is optional callback.\n\n```javascript\nprimus.leave(spark, 'room', fn);\n```\n\n### primus.room(spark, name, [fn])\n\nTarget a specific `room` or rooms for broadcasting a message.\n\n```javascript\nprimus.room('room').write('hi');\n```\n\n`in` is an equivalent method to `room`:\n\n```javascript\nprimus.in('room').write('hi');\n```\n\n### primus.room(room).write(message)\n\nSend a message to a specific `room`.\n\n```javascript\nprimus.room('room').write('hi');\n```\nor to multiple rooms at once:\n\n```javascript\nprimus.room('sport news art').write('hi');\n```\n\n### primus.room(name).except(ids);\n\nBroadcast messages to clients in a room except to those especified.\n\n```javascript\nprimus.room('room').except('1386018854525$0 1386018854526$1').write('hi');\n```\n\nor pass an array:\n\n```javascript\nvar except = ['1386018854525$0', '1386018854526$1'];\nprimus.room('room').except(except).write('hi');\n```\n\n### primus.room(room).clients([fn])\n\nGet all client `ids` connected to a specific `room`. \nIf no callback is passed the function will return synchronously the ids \nbut please remember that NOT all adapters are guaranteed to be able to do \nthis operation synchronously.\n\n```javascript\nprimus.room('room').clients(fn);\n```\n\nor synchronously if adapter supports it:\n\n```javascript\nvar clients = primus.room('room').clients();\nconsole.log(clients);\n```\n### primus.rooms([spark])\n\nGet all active rooms on the server.\n\n```javascript\nprimus.rooms();\n```\n\nGet all rooms a specific spark is connected to.\n\n```javascript\nprimus.rooms(spark, fn);\n```\n\n### primus.on('joinroom')\n\nThe `joinroom` event is emitted every time a spark has joined a room. \nFirst argument of the callback is the `room` and second argument is the spark.\n\n```javascript\nprimus.on('joinroom', function (room, spark) {\n  console.log(spark.id + ' joined ' + room);\n});\n```\n\n### primus.on('leaveroom')\n\nThe `leaveroom` event is emitted every time a spark has left a room. \nFirst argument of the callback is the `room` and second argument is the spark.\n\n```javascript\nprimus.on('leaveroom', function (room, spark) {\n  console.log(spark.id + ' left ' + room);\n});\n```\n\n### primus.on('leaveallrooms')\n\nThe `leaveallrooms` event is emitted every time the leaveAll method \nis called on a spark or when the `end` event is emitted on the client. \nFirst argument of the callback is an array with all `rooms` client joined.\n\n```javascript\nprimus.on('leaveroom', function (room, spark) {\n  console.log(spark.id + ' leaving all rooms:', room);\n});\n```\n\n### primus.on('roomserror')\n\nThe `roomserror` event is emitted every time a spark encounter an error when joining or leaving a room. \nFirst argument of the callback is the `error` object and second argument is the spark.\n\n```javascript\nprimus.on('roomserror', function (error, spark) {\n  console.log('room error from ' + spark.id, error);\n});\n```\n\n### spark.join(name, [fn])\n\nJoin client to a `room`, `fn` is optional callback.\n\n```javascript\nspark.join('room');\n```\n\nJoin multiple rooms at once.\n\n```javascript\nspark.join('room1 room2 room3', fn);\n```\n\n### spark.room(name, [fn])\n\nTarget a specific `room`.\n\n```javascript\nspark.room('room').write('hi');\nspark.room('room').clients(fn);\n```\n\n`in` is an equivalent method to `room`:\n\n```javascript\nspark.in('room').write('hi');\nspark.in('room').clients(fn);\n```\n\n### spark.room(room).write(message)\n\nSend a message to a specific `room`.\n\n```javascript\nspark.room('room').write('hi');\n```\n\n### spark.room(name).except(ids);\n\nBroadcast messages to clients in a room except to those especified.\n\n```javascript\nspark.room('room').except('1386018854525$0 1386018854526$1').write('hi');\n```\n\nor pass an array:\n\n```javascript\nvar except = ['1386018854525$0', '1386018854526$1'];\nspark.room('room').except(except).write('hi');\n```\n\n### spark.room(room).clients([fn])\n\nGet all client `ids` connected to specific `room`. \nIf no callback is passed the function will return synchronously the ids \nbut please remember that NOT all adapters are guaranteed to be able to do \nthis operation synchronously.\n\n```javascript\nspark.room('room').clients(fn);\n```\n\nor synchronously if adapter supports it:\n\n```javascript\nvar clients = spark.room('room').clients();\nconsole.log(clients);\n```\n\n### spark.leave(name, [fn])\n\nLeave a specific `room`, `fn` is optional callback.\n\n```javascript\nspark.leave('room', fn);\n```\n\nLeave multiple rooms at once.\n\n```javascript\nspark.leave('room1 room2 room3', fn);\n```\n\n### spark.leaveAll()\n\nLeave all rooms the client has joined.\n\n```javascript\nspark.leaveAll();\n```\n\n### spark.rooms()\n\nGet all rooms client is connected to.\n\n```javascript\nspark.rooms();\n```\n\n### spark.isRoomEmpty([room])\n\nCheck to see if a room is empty.\n\n```javascript\nspark.isRoomEmpty('sport');\n```\n\nor you can also use it like this:\n\n```javascript\nspark.room('sport').isRoomEmpty();\n```\n\n### spark.on('joinroom')\n\nThe `joinroom` event is emitted every time a spark has joined a room. \nFirst argument of the callback is the `room`.\n\n```javascript\nspark.on('joinroom', function (room) {\n  console.log(room);\n});\n```\n\n### spark.on('leaveroom')\n\nThe `leaveroom` event is emitted every time a spark has left a room. \nFirst argument of the callback is the `room`.\n\n```javascript\nspark.on('leaveroom', function (room) {\n  console.log(room);\n});\n```\n\n### spark.on('leaveallrooms')\n\nThe `leaveallrooms` event is emitted every time the leaveAll method \nis called on a spark or when the `end` event is emitted on the client. \nFirst argument of the callback is an array with all `rooms` client joined.\n\n```javascript\nspark.on('leaveroom', function (room) {\n  console.log(room);\n});\n```\n\n### spark.on('roomserror')\n\nThe `roomserror` event is emitted every time a spark encounter an error when joining or leaving a room. \nFirst argument of the callback is the `error` object.\n\n```javascript\nspark.on('roomserror', function (error) {\n  console.log(error);\n});\n```\n\n## Run tests\n\n``` bash\n$ make test\n```\n\n## Other plugins\n\n * [primus-multiplex](https://github.com/cayasso/primus-multiplex)\n * [primus-emitter](https://github.com/cayasso/primus-emitter)\n * [primus-resource](https://github.com/cayasso/primus-resource)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jonathan Brumley &lt;cayasso@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cayasso/primus-rooms/issues"
  },
  "_id": "primus-rooms@2.2.0",
  "_from": "primus-rooms@2.2.x"
}
