{
  "name": "primus-multiplex",
  "version": "2.2.0",
  "description": "Simple multiplexing for Primus",
  "author": {
    "name": "Jonathan Brumley",
    "email": "cayasso@gmail.com"
  },
  "homepage": "https://github.com/cayasso/primus-multiplex",
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "build": "make build"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cayasso/primus-multiplex.git"
  },
  "keywords": [
    "multiplex",
    "realtime",
    "websocket",
    "engine.io",
    "socket.io",
    "primus",
    "sockjs",
    "rooms",
    "browserchannel",
    "publish",
    "subscribe"
  ],
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "primus": "git://github.com/3rd-Eden/primus.git",
    "ws": "~0.4.27",
    "primus-emitter": "2.x.x",
    "primus-rooms": "2.x.x"
  },
  "readme": "# Primus Multiplex\n\n[![Build Status](https://travis-ci.org/cayasso/primus-multiplex.png?branch=master)](https://travis-ci.org/cayasso/primus-multiplex)\n[![NPM version](https://badge.fury.io/js/primus-multiplex.png)](http://badge.fury.io/js/primus-multiplex)\n\nNode.JS module that adds mutiplexing to [Primus](https://github.com/3rd-Eden/primus).\n\n## Instalation\n\n```\n$ npm install primus-multiplex\n```\n\n## Usage\n\n### On the Server\n\n```javascript\nvar Primus = require('primus');\nvar multiplex = require('primus-multiplex');\nvar server = require('http').createServer();\n\n// primus instance\nvar primus = new Primus(server, { transformer: 'sockjs', parser: 'JSON' });\n\n// add multiplex to Primus\nprimus.use('multiplex', multiplex);\n\nvar news = primus.channel('news');\nnews.on('connection', function (spark) {\n  \n  spark.write('hi from the news channel');\n\n  spark.on('data', function (data) {\n    spark.write(data);\n  });\n\n});\n\nvar sport = primus.channel('sport');\nsport.on('connection', function (spark) {\n  \n  spark.write('hi from the sport channel');\n\n  spark.on('data', function (data) {\n    spark.write(data);\n  });\n\n});\n\nserver.listen(8080);\n```\n\n### On the Client\n\n```javascript\nvar primus = Primus.connect('ws://localhost:8080');\n\n// Connect to channels\nvar news = primus.channel('news');\nvar sport = primus.channel('sport');\n\n// Send message\nnews.write('hi news channel');\nsport.write('hi sport channel');\n\n// Receive message\nnews.on('data', function (msg) {\n    console.log(msg);\n});\nsport.on('data', function (msg) {\n    console.log(msg);\n});\n```\n\n## API\n\n### Server\n\n#### primus.channel(name)\n\nCreate a new channel on the server.\n\n```javascript\nvar news = primus.channel('news');\nnews.on('connection', fn);\n```\n\n#### channel.write(message)\n\nBroadcast a message to all connected `Sparks` in the channel.\n\n```javascript\nnews.write(message);\n```\n\n#### channel.forEach(fn)\n\nIterare over all `Sparks` in a channel. This could also be used \nfor broadcasting to specific `Sparks`.\n\n```javascript\nnews.forEach(function (spark, id, connections) {\n  spark.write('message');\n});\n```\n\n#### channel.destroy()\n\nDestroy the channel removing all 'Sparks' and event listeners.\nThis will emit a `close` event.\n\n```javascript\nnews.on('connection', function (spark) {\n  news.destroy();\n});\n```\n\n#### channel.on('close', fn)\nTriggers when the destroy method is called.\n\n```javascript\nnews.on('connection', function (spark) {\n  news.destroy();\n});\n\nnews.on('close', function () {\n  console.log('channel was destroyed');  \n});\n```\n\n#### spark.end([fn])\n\nEnd the connection.\n\n```javascript\nnews.on('connection', function (spark) {\n  spark.end(fn);\n});\n```\n\n### Client\n\n#### spark.write(message)\n\nSend a message to the server.\n\n```javascript\nnews.write('hi server');\n```\n\n#### spark.end()\n\nDisconnect from a channel.\n\n```javascript\nvar news = primus.channel('news');\nnews.end();\n```\n\n#### spark.on('data', fn)\nReceive `data` from the server form the corresponding `channel`.\n\n```javascript\nspark.on('data', function(msg) {\n  console.log('Received message from news channel', msg);\n});\n```\n\n## Protocol\n\nEach message consists of an array of four parts: `type` (`Number`), `id` (`String`),\n`topic` (`String`), and `payload` (`Mixed`).\n\nThere are three valid message types:\n\n * `Packet#MESSAGE` (`1`)  send a message with `payload` on a `topic`.\n * `Packet#SUBSCRIBE` (`2`) subscribe to a given `topic`.\n * `Packet#UNSUBSCRIBE` (`3`) unsubscribe from a `topic`.\n\nThe `topic` identifies a channel registered on the server side.\nThe `id` represent a unique connection identifier generated on the client side. \n\nEach request to subscribe to a topic from a given client has a unique id.\nThis makes it possible for a single client to open multiple independent\nchannel connection to a single server-side service.\n\nInvalid messages are simply ignored.\n\nIt's important to notice that the namespace is shared between both\nparties and it is not a good idea to use the same topic names on the\nclient and on the server side. Both parties may express a will to\nunsubscribe itself or other party from a topic.\n\n## Run tests\n\n``` bash\n$ make test\n```\n\n## Inspiration\n\nThis library was inspire by this great post:\n\n* https://www.rabbitmq.com/blog/2012/02/23/how-to-compose-apps-using-websockets/\n\n## Other plugins\n\nPrimusMultiplex is compatible with the following plugins, check the [examples](https://github.com/cayasso/primus-multiplex/tree/master/examples/node) to see more.\n\n * [primus-rooms](https://github.com/cayasso/primus-rooms)\n * [primus-emitter](https://github.com/cayasso/primus-emitter)\n * [primus-resource](https://github.com/cayasso/primus-resource)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jonathan Brumley &lt;cayasso@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cayasso/primus-multiplex/issues"
  },
  "_id": "primus-multiplex@2.2.0",
  "_from": "primus-multiplex@2.2.x"
}
