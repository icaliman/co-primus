{
  "name": "primus.io",
  "version": "2.0.2",
  "description": "Primus.IO makes working with Primus a little slicker.",
  "author": {
    "name": "Jonathan Brumley",
    "email": "cayasso@gmail.com"
  },
  "homepage": "https://github.com/cayasso/primus.io",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cayasso/primus.io.git"
  },
  "keywords": [
    "connection",
    "ws",
    "rooms",
    "channels",
    "realtime",
    "real time",
    "websocket",
    "engine.io",
    "socket.io",
    "plugin",
    "sockjs",
    "browserchannel",
    "primus",
    "primus.io"
  ],
  "license": "MIT",
  "dependencies": {
    "debug": "0.7.x",
    "primus": "~1.x.x",
    "primus-rooms": "2.2.x",
    "primus-emitter": "2.0.x",
    "primus-multiplex": "2.2.x"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "ws": "~0.4.27"
  },
  "readme": "# Primus.IO\n\n[![Build Status](https://travis-ci.org/cayasso/primus.io.png?branch=master)](https://travis-ci.org/cayasso/primus.io)\n[![NPM version](https://badge.fury.io/js/primus.io.png)](http://badge.fury.io/js/primus.io)\n\nPrimus.IO makes working with [Primus](https://github.com/3rd-Eden/primus) a little slicker, it ads some hight level features like:\n\n- Emit-style with `send()` w/ arguments.\n- Client & server side \"ack\" callbacks.\n- Multiplexing via channels.\n- Rooms.\n- Serves `/primus.io.js`.\n\nPrimus.IO combines the core [Primus](https://github.com/3rd-Eden/primus) with [primus-rooms](https://github.com/cayasso/primus-rooms), [primus-emitter](https://github.com/cayasso/primus-emitter) and [primus-multiplex](https://github.com/cayasso/primus-multiplex) plugins to provide an easy and still powerfull way of developing real time applications.\n\nFor more details on options or additional methods please check each individual module README file and test cases.\n\n## Version 2.x (IMPORTANT)\n\nAs of `primus.io` version 2+ the `emit` method will no longer be supported, instead use the `send` method, this is because `emit` is widely used by Primus for internal events, so this required some hacks and also an event black list to maintain for  avoiding event collisions, for the sake of simplicity and the sake of maintainability I decided to drop the method in `primus-emitter`, the new method `send` works the same as emit, and it removes hacks and the event blacklist to support.\n\nYou can always go back and install the previous version if you really need to.\n\n```bash\n$ npm install primus.io@1.1.1\n```\n\n### Instalation\n\n```bash\n$ npm install primus.io\n```\n\n### Quick Start\n\n#### On the Server\n\n```javascript\nvar Primus = require('primus.io');\nvar server = require('http').createServer();\n\nvar primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\nprimus.on('connection', function (spark) {\n\n  // listen to hi events\n  spark.on('hi', function (msg) {\n    \n    console.log(msg); //-> hello world\n\n    // send back the hello to client\n    spark.send('hello', 'hello from the server');\n\n  });\n\n});\n\nserver.listen(8080);\n```\n\n#### On the Client\n\nIf using in the browser just:\n\n```html\n<script src=\"/primus/primus.io.js\"></script>\n```\n\nThen create your client `Primus` instance like this:\n\n```javascript\nvar socket = Primus.connect('ws://localhost:8080');\n\nsocket.on('open', function () {\n\n  // Send request to join the news room\n  socket.send('hi', 'hello world');\n\n  // listen to hello events\n  socket.on('hello', function (msg) {\n\n    console.log(msg); //-> hello from the server\n\n  });\n\n});\n\n```\n\nIf in NodeJS using the same `Primus` instance that created the server then do:\n\n```javascript\n// create socket instance\nvar socket = new primus.Socket('ws://localhost:8080');\n\nsocket.on('open', function () {\n\n  // Send request to join the news room\n  socket.send('hi', 'hello world');\n\n  // listen to hello events\n  socket.on('hello', function (msg) {\n\n    console.log(msg); //-> hello from the server\n\n  });\n\n});\n```\n\nIf using a different instance of NodeJS then do this:\n\n```javascript\n// create a socket\nvar Socket = require('primus.io').createSocket({ transformer: 'websockets' });\n\n// get socket instance\nvar socket = new Socket('ws://localhost:8080');\n\nsocket.on('open', function () {\n\n  // Send request to join the news room\n  socket.send('hi', 'hello world');\n\n  // listen to hello events\n  socket.on('hello', function (msg) {\n\n    console.log(msg); //-> hello from the server\n\n  });\n\n});\n```\n\nCheck the examples for more use cases.\n\n## How to use\n\n### Using with Node HTTP server\n\n#### Server\n\n```javascript\n  var Primus = require('primus')\n    , http = require('http')\n    , fs = require('fs');\n\n  // serve index.html\n  var server = http.createServer(function server(req, res) {\n    res.setHeader('Content-Type', 'text/html');\n    fs.createReadStream(__dirname + '/index.html').pipe(res);\n  });\n\n  // Primus server\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.on('connection', function (spark) {\n    spark.send('news', { hello: 'world' });\n    spark.on('my other event', function (data) {\n      console.log(data);\n    });\n  });\n\n  server.listen(8080);\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/');\n\n  primus.on('news', function (data) {\n    console.log(data);\n    primus.send('my other event', { my: 'data' });\n  });\n```\n\n\n### Using with Express\n\nExpress requires that you instantiate a `http.Server` to attach socket.io to first:\n\n#### Server\n\n```javascript\n  var express = require('express')\n    , Primus = require('primus.io')\n    , http = require('http')\n    , app = express()\n    , server = http.createServer(app);\n\n  // Primus server\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.on('connection', function (spark) {\n    spark.send('news', { hello: 'world' });\n    spark.on('my other event', function (data) {\n      console.log(data);\n    });\n  });\n\n  // serve index.html\n  app.get('/', function (req, res) {\n    res.sendfile(__dirname + '/index.html');\n  });\n\n  server.listen(8080);\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/');\n\n  primus.on('news', function (data) {\n    console.log(data);\n    primus.send('my other event', { my: 'data' });\n  });\n```\n\n### Sending and receiving events.\n\nPrimus.IO allows you to emit and receive custom events:\n\n#### Server\n\n```javascript\n  var Primus = require('primus.io')\n    , server = require('http').Server();\n\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.on('connection', function (spark) {\n\n    spark.send('welcome', 'welcome to the server');\n\n    spark.on('private message', function (from, msg) {\n      console.log('I received a msg by ', from, ' saying ', msg);\n    });\n\n  });\n\n  server.listen(8080);\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/');\n  \n  primus.on('welcome', function (msg) {\n    primus.send('private message', 'Bob', 'hi!');\n  });  \n```\n\nCheck for more documentation on event emitting here [primus-emitter](https://github.com/cayasso/primus-emitter).\n\n### Using channels (or known as namespaces).\n\nChannels provides the benefit of `multiplexing` a single connection.\n\n#### Server\n\n```javascript\n  var Primus = require('primus.io')\n    , server = require('http').Server();\n\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  var chat = primus.channel('chat');\n  var news = primus.channel('news');\n\n  chat.('connection', function (spark) {\n    spark.send('chat', 'welcome to this chat');\n  });\n\n  news.on('connection', function (socket) {\n      socket.send('news', { news: 'item' });\n  });\n\n  server.listen(8080);\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/')\n    , chat = primus.channel('chat')\n    , news = primus.channel('news');\n  \n  chat.on('chat', function (msg) {\n    console.log(msg); //-> welcome to this chat\n  });\n  \n  news.on('news', function (data) {\n    console.log(data.news); //-> item\n  });\n```\n\nCheckout this [post](https://www.rabbitmq.com/blog/2012/02/23/how-to-compose-apps-using-websockets/) \nfor more deep understanding of channels and why it's implemented like this.\n\nAlso check out for more documentation on multiplexing here [primus-multiplex](https://github.com/cayasso/primus-multiplex).\n\n### Acknowledgements\n\nTo get a callback when the server or client confirmed the message reception, simply pass a function as the last parameter of `.send`.\n\n#### Server\n\n```javascript\n  var Primus = require('primus.io')\n    , server = require('http').Server();\n\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.on('connection', function (spark) {\n    spark.on('chat', function (name, fn) {\n    console.log(name); //-> Bob\n    fn('woot');\n\n    spark.send('What is your name', function (name) {\n      console.log(name); //-> My name is Ann\n    });\n  });\n\n});\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/');\n\n  primus.on('open', function () {\n    primus.send('chat', 'Bob', function (msg) {\n      console.log(msg); //-> woot\n    });\n\n    primus.on('What is your name', function (fn) {\n      fn('My name is Ann')\n    });\n  });\n```\n\n\n### Broadcasting messages (server side).\n\nTo broadcast a message to all connected clients simple use the `primus.write` method. The same apply for channels.\n\n#### Server\n\n```javascript\n  var Primus = require('primus.io')\n    , server = require('http').Server();\n\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.write('Some data');\n\n});\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/');\n\n  primus.on('data', function (data) {\n    console.log(data); //-> Some data\n  });\n```\n\nYou can also broadcast messages to all clients by emitting events using the `primus.send` method. The same apply for channels.\n\n#### Server\n\n```javascript\n  var Primus = require('primus.io')\n    , server = require('http').Server();\n\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.send('news', 'Some data');\n\n});\n```\n\n#### Client\n\n```javascript\n  var primus = new Primus('http://localhost:8080/');\n\n  primus.on('news', function (data) {\n    console.log(data); //-> Some data\n  });\n```\n\nYou can also use the `primus.forEach` method to iterate over all current connections.\n\n#### Server\n\n```javascript\n  var Primus = require('primus.io')\n    , server = require('http').Server();\n\n  var primus = new Primus(server, { transformer: 'websockets', parser: 'JSON' });\n\n  primus.forEach(function (spark, id, connections) {\n    if (spark.query.foo !== 'bar') return;\n\n    spark.write('message');\n  });\n\n});\n```\n\nCheck out more information on [broadcasting with Primus](https://github.com/3rd-Eden/primus#broadcasting).\n\n### Rooms\n\n#### Server\n\n```javascript\nvar Primus = require('primus.io');\nvar server = require('http').createServer();\n\n// primus instance\nvar primus = new Primus(server, { transformer: 'websockets' });\n\nprimus.on('connection', function (spark) {\n\n  spark.on('join', function (room) {\n    spark.join(room, function () {\n\n      // send message to this client\n      spark.send('sport', 'you joined room ' + room);\n\n      // send message to all clients except this one\n      spark.room(room).send('sport', spark.id + ' joined room ' + room);\n    });\n  });\n\n  spark.on('leave', function (room) {\n    spark.leave(room, function () {\n        \n      // send message to this client\n      spark.send('sport', 'you left room ' + room);\n    });\n  });\n\n});\n\nserver.listen(8080);\n```\n\n#### Client\n\n```javascript\nvar primus = Primus.connect('ws://localhost:8080');\n\nprimus.on('open', function () {\n\n  // Send request to join the sport room\n  primus.send('join', 'sport');\n\n  // Then later send request to leave the sport room\n  primus.send('leave', 'sport');\n\n  // print server message\n  primus.on('sport', function (message) {\n    \n    console.log(message); \n\n    // First output is\n    //-> you joined room sport\n\n    // Then later\n    //-> you left room sport\n\n  });\n\n});\n\n```\n\nYou can check for more documentation on rooms here [primus-rooms](https://github.com/cayasso/primus-rooms).\n\n### Run tests\n\n``` bash\n$ make test\n```\n\n### Credits\n\n * To Arnout Kazemier [3rdEden](https://twitter.com/3rdEden) for the awesome idea of building [Primus](https://github.com/3rd-Eden/primus).\n\n### License\n\n(The MIT License)\n\nCopyright (c) 2013 Jonathan Brumley &lt;cayasso@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cayasso/primus.io/issues"
  },
  "_id": "primus.io@2.0.2",
  "_from": "primus.io@"
}
